# dfs로 풀려면 얼음 틀을 어떻게 나타내야 할까?
# 언제 탐색을 멈춰야 할까?
# 방문한 칸인지를 어떻게 표시할까?
# 하나의 아이스크림으로 만들 수 있는 덩어리를 어떻게 구분할까?

n, m = 4, 5 #세로 4, 가로 5
ice_tray = [[0,0,1,1,0],
 [0,0,0,1,1],
 [1,1,1,1,1],
 [0,0,0,0,0]
 ]

# 상, 하, 좌, 우 방향으로 붙어 있으면 연결된 걸로 간주한다
# -> 네 방향으로 탐색을 시도했을 때 어떤 방향으로 앞에 있는 칸의 값이 0이면 구멍이 뜷려 있고, 서로 연결되어 있다고 볼 수 있다

# 방문한 정보는 어디에 넣어야 하나? 그냥 1차원 스택이어도 상관없나?
visited = []

# 탐색을 어떻게 해야 할까?
# ice_try[0][0]부터 ice_tray[n-1][m-1]까지 for 루프로 돌면 모든 칸을 순회할 수 있다
for i in range(n):
 for j in range(m):
  if ice_tray[i][j] == 1: # 현재 위치가 칸막이라면, 탐색을 그만둔다
   # 그만두면 뭘 바꿔야 할까?
  elif ice_tray[i][j] == 0: # 현재 위치에 구멍이 뚫려있다면, 방문처리하고 상,하,좌,우 방향으로 탐색을 계속한다
   # 어떤 식으로 넣어야 할까? visited.append(ice_tray[i][j]) 형식으로 넣게 되면 어떤 위치를 방문했는지 알 수 없으니 의미가 없다.
   # 뭘 넣어야 할까? 인덱스 조합? (0,0), (2,0) 같은?
   visited.append((i,j))
   # 방문 정보에 넣은 인덱스 조합 정보는 언제 빼야 할까? => 해당 인덱스 조합을 방문했을 때?
   x(ice_tray[i-1][j])
   x(ice_tray[i+1][j])
   x(ice_tray[i][j-1])
   x(ice_tray[i][j+1])